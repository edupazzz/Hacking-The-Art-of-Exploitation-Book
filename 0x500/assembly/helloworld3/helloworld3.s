BITS 32 ; Tell nasm this is 32-bit code

jmp short one

two:
; ssize_t write(int fd, const void *buf, size_t count);
	pop ecx				; pop the return address (string ptr) into ecx
	xor eax, eax  ; Zero out full 32 bits of eax registers
	mov al, 4			; Write syscall #4 to the low byte of eax
	xor ebx, ebx  ; Zero out ebx
	inc ebx       ; Increment ebx to 1, STDOUT file descriptor
  xor edx, edx  ; Zero out edx
	mov dl, 15    ; Length of the string
	int 0x80 			; Do the syscall: write(1, string, 14)

; void _exit(int status);
	mov al, 1			; Exit syscall #1, the top 3 bytes are still zeroed
	dec ebx				; Devrement ebx back down to 0 for status = 0
	int 0x80			; Do syscall: exit(0)

one:
	call two ; Call back upwards to avoid null bytes
	db "Hello, world!", 0x0a, 0x0d ; with newline and carriage return bytes

